import json
import sqlite3

class Gateway(object):

    def __init__(self):
        self.conn = sqlite3.connect('app.db', check_same_thread=False)

    def getAll(self):
        cur = self.conn.cursor()
        cur.execute("""SELECT ID, {% for Field in Model.Fields %}{{ Field.Name }}{% if not loop.last %}, {% endif %}{% endfor %} FROM {{ Model.Name }};""")
        columns = cur.description
        results = [{columns[index][0]:column for index, column in enumerate(value)} for value in cur.fetchall()]
        return results

    def create(self,model):
        cur = self.conn.cursor()
        sql = """INSERT INTO {{ Model.Name }}
                 ({% for Field in Model.Fields %}{{ Field.Name }}{% if not loop.last %}, {% endif %}{% endfor %})
                 VALUES({% for Field in Model.Fields %}{{ "'{}'" }}{% if not loop.last %}, {% endif %}{% endfor %});"""
        cur.execute(sql.format({% for Field in Model.Fields %}model['{{ Field.Name }}']{% if not loop.last %}, {% endif %}{% endfor %}))
        self.conn.commit()
        return(self.successReturn())

    def modify(self,model):
        cur = self.conn.cursor()
        sql = """UPDATE {{ Model.Name }} SET {% for Field in Model.Fields %}{{ Field.Name }} = '{}'{% if not loop.last %}, {% endif %}{% endfor %} WHERE ID = '{}';"""
        cur.execute(sql.format({% for Field in Model.Fields %}model['{{ Field.Name }}']{% if not loop.last %}, {% endif %}{% endfor %}, model['ID']))
        self.conn.commit()
        return(self.successReturn())

    def delete(self,model):
        cur = self.conn.cursor()
        cur.execute("""DELETE FROM {{ Model.Name }} WHERE ID = '{}';""".format(str(model['ID'])))
        self.conn.commit()
        return(self.successReturn())

    def get(self,ID):
        cur = self.conn.cursor()
        cur.execute("""SELECT ID, {% for Field in Model.Fields %}{{ Field.Name }}{% if not loop.last %}, {% endif %}{% endfor %} FROM {{ Model.Name }} WHERE ID = '{}';""".format(str(ID)))
        columns = cur.description
        results = [{columns[index][0]:column for index, column in enumerate(value)} for value in cur.fetchall()]
        result = results[0]
        return(result)

    def successReturn(self):
        result = {}
        result["Status"] = str("OK")
        result["Code"] = 200
        return result

    def failureReturn(self):
        result = {}
        result["Status"] = str("Bad Request")
        result["Code"] = 400
        return result
